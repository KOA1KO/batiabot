import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text

from handlers.start import buttons, start
from handlers.gamee import get_keyboard, get_keyboard2

from configer import config

bot = Bot(token=config.TOKEN)

sappbut = types.InlineKeyboardButton('5x5|24 –±–æ–º–±—ã', callback_data='5but')
back_button = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ üîô', callback_data='cancel')
sapperKB = types.InlineKeyboardMarkup(row_width=2).add(sappbut).row(back_button)


async def sapper(message: types.Message):
    await message.answer('–ë–∞—Ç—è, –≤–æ—Ç –æ–Ω–∞, —Ç–∞ —Å–∞–º–∞—è –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —á–∞—Å—ã –Ω–∞–ø—Ä–æ–ª–µ—Ç)) –ò –¥–∞–∂–µ –Ω—É–∂–Ω–æ)', reply_markup=sapperKB)


async def fith(call: types.CallbackQuery):
    reply_markupp = await get_keyboard()
    await call.message.edit_text(text='–ò–≥—Ä–∞ 5—Ö5|24 –±–æ–º–±—ã\n–í—Å–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞. –ù—É –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ))', reply_markup=reply_markupp)


async def trust(call: types.CallbackQuery):
    reply_markupp = await get_keyboard2()
    await call.message.edit_text(text='–£—Ä–∞, +200 —Ä—É–± –≤ –°–µ–º–µ–π–Ω—É—é –∫–∞–∑–Ω—É', reply_markup=reply_markupp)
    config.familycoin = config.familycoin + 200
    await asyncio.sleep(2)
    await call.message.edit_text(text='–£—Ä–∞, +200 —Ä—É–± –≤ –°–µ–º–µ–π–Ω—É—é –∫–∞–∑–Ω—É', reply_markup=None)
    await call.message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=start)


async def trustwin(call: types.CallbackQuery):
    reply_markupp = await get_keyboard2()
    await  call.message.edit_text(text='–ù–∏—á–µ–≥–æ —Å–µ–±–µ, —è –ø–æ—Ä–∞–∂–µ–Ω. -100 —Ä—É–± –∏–∑ –°–µ–º–µ–π–Ω–æ–π –∫–∞–∑–Ω—ã', reply_markup=reply_markupp)
    config.familycoin = config.familycoin - 100
    await asyncio.sleep(2)
    await call.message.edit_text(text='–ù–∏—á–µ–≥–æ —Å–µ–±–µ, —è –ø–æ—Ä–∞–∂–µ–Ω. -100 —Ä—É–± –∏–∑ –°–µ–º–µ–π–Ω–æ–π –∫–∞–∑–Ω—ã', reply_markup=None)
    await call.message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=start)


async def nopetap(call: types.CallbackQuery):
    await call.answer(text='–ù–µ–ª—å–∑—è', show_alert=True)


async def cancel(call: types.CallbackQuery):
    await call.message.edit_text(text='–ù—É –Ω–∞–∑–∞–¥, —Ç–∞–∫ –Ω–∞–∑–∞–¥', reply_markup=None)
    await call.message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start)


def register_game_handler(dp: Dispatcher):
    dp.register_message_handler(sapper, Text(equals=buttons[2]), state='*')
    dp.register_callback_query_handler(cancel, lambda call: call.data == 'cancel')
    dp.register_callback_query_handler(fith, lambda call: call.data == '5but')
    dp.register_callback_query_handler(trust, lambda call: call.data == 'bomb')
    dp.register_callback_query_handler(trustwin, lambda call: call.data == 'win')
    dp.register_callback_query_handler(nopetap, lambda call: call.data == 'nope')
